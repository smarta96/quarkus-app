apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    pipeline.openshift.io/started-by: 'kube:admin'
  resourceVersion: '467480'
  name: quarkus-pipeline-zxjp1o
  uid: 6a191780-c9bc-4943-893d-9e7533b47c2b
  creationTimestamp: '2024-08-27T08:40:22Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:pipeline.openshift.io/started-by': {}
          'f:labels':
            .: {}
            'f:tekton.dev/pipeline': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:pipelineRef':
            .: {}
            'f:name': {}
          'f:status': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2024-08-27T08:40:22Z'
    - apiVersion: tekton.dev/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:finalizers':
            .: {}
            'v:"chains.tekton.dev/pipelinerun"': {}
      manager: openshift-pipelines-chains-controller
      operation: Update
      time: '2024-08-27T08:40:22Z'
    - apiVersion: tekton.dev/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          .: {}
          'f:childReferences': {}
          'f:conditions': {}
          'f:pipelineSpec':
            .: {}
            'f:tasks': {}
            'f:workspaces': {}
          'f:provenance':
            .: {}
            'f:featureFlags':
              'f:ScopeWhenExpressionsToTask': {}
              'f:SetSecurityContext': {}
              'f:DisableCredsInit': {}
              'f:DisableAffinityAssistant': {}
              'f:EnableKeepPodOnCancel': {}
              'f:VerificationNoMatchPolicy': {}
              'f:DisableInlineSpec': {}
              'f:RunningInEnvWithInjectedSidecars': {}
              'f:EnableCELInWhenExpression': {}
              'f:EnableArtifacts': {}
              'f:EnableTektonOCIBundles': {}
              .: {}
              'f:MaxResultSize': {}
              'f:AwaitSidecarReadiness': {}
              'f:EnableProvenanceInStatus': {}
              'f:EnableParamEnum': {}
              'f:Coschedule': {}
              'f:ResultExtractionMethod': {}
              'f:EnableStepActions': {}
              'f:EnableAPIFields': {}
              'f:RequireGitSSHSecretKnownHosts': {}
              'f:EnforceNonfalsifiability': {}
              'f:SendCloudEventsForRuns': {}
          'f:startTime': {}
      manager: openshift-pipelines-controller
      operation: Update
      subresource: status
      time: '2024-08-27T08:40:22Z'
  namespace: default
  finalizers:
    - chains.tekton.dev/pipelinerun
  labels:
    tekton.dev/pipeline: quarkus-pipeline
spec:
  pipelineRef:
    name: quarkus-pipeline
  taskRunTemplate:
    serviceAccountName: pipeline
  timeouts:
    pipeline: 1h0m0s
  workspaces:
    - emptyDir: {}
      name: shared
status:
  childReferences:
    - apiVersion: tekton.dev/v1
      kind: TaskRun
      name: quarkus-pipeline-zxjp1o-git-clone
      pipelineTaskName: git-clone
  conditions:
    - lastTransitionTime: '2024-08-27T08:40:22Z'
      message: 'Tasks Completed: 0 (Failed: 0, Cancelled 0), Incomplete: 3, Skipped: 0'
      reason: Running
      status: Unknown
      type: Succeeded
  pipelineSpec:
    tasks:
      - name: git-clone
        params:
          - name: url
            value: 'https://github.com/smarta96/quarkus-app.git'
          - name: revision
            value: ''
          - name: refspec
            value: ''
          - name: submodules
            value: 'true'
          - name: depth
            value: '1'
          - name: sslVerify
            value: 'true'
          - name: crtFileName
            value: ca-bundle.crt
          - name: subdirectory
            value: ''
          - name: sparseCheckoutDirectories
            value: ''
          - name: deleteExisting
            value: 'true'
          - name: httpProxy
            value: ''
          - name: httpsProxy
            value: ''
          - name: noProxy
            value: ''
          - name: verbose
            value: 'true'
          - name: gitInitImage
            value: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:681dc67d2aa1dbecbf65ecd229c8b181dae533bf14b07543c1aeead36aed2198'
          - name: userHome
            value: /home/git
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: shared
        status:
          conditions:
            - lastTransitionTime: '2024-08-27T08:40:47Z'
              message: Not all Steps in the Task have finished executing
              reason: Running
              status: Unknown
              type: Succeeded
          podName: quarkus-pipeline-zxjp1o-git-clone-pod
          provenance:
            featureFlags:
              MaxResultSize: 4096
              AwaitSidecarReadiness: true
              Coschedule: workspaces
              ResultExtractionMethod: termination-message
              EnableParamEnum: false
              SendCloudEventsForRuns: false
              EnforceNonfalsifiability: none
              ScopeWhenExpressionsToTask: false
              SetSecurityContext: false
              DisableCredsInit: false
              DisableAffinityAssistant: true
              EnableStepActions: false
              EnableAPIFields: beta
              RequireGitSSHSecretKnownHosts: false
              RunningInEnvWithInjectedSidecars: true
              EnableKeepPodOnCancel: false
              EnableTektonOCIBundles: false
              VerificationNoMatchPolicy: ignore
              EnableProvenanceInStatus: true
              DisableInlineSpec: ''
              EnableArtifacts: false
              EnableCELInWhenExpression: false
          startTime: '2024-08-27T08:40:22Z'
          taskSpec:
            description: |-
              These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
              The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
            params:
              - description: Repository URL to clone from.
                name: url
                type: string
              - default: ''
                description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
                name: revision
                type: string
              - default: ''
                description: Refspec to fetch before checking out revision.
                name: refspec
                type: string
              - default: 'true'
                description: Initialize and fetch git submodules.
                name: submodules
                type: string
              - default: '1'
                description: 'Perform a shallow clone, fetching only the most recent N commits.'
                name: depth
                type: string
              - default: 'true'
                description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
                name: sslVerify
                type: string
              - default: ca-bundle.crt
                description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
                name: crtFileName
                type: string
              - default: ''
                description: Subdirectory inside the `output` Workspace to clone the repo into.
                name: subdirectory
                type: string
              - default: ''
                description: Define the directory patterns to match or exclude when performing a sparse checkout.
                name: sparseCheckoutDirectories
                type: string
              - default: 'true'
                description: Clean out the contents of the destination directory if it already exists before cloning.
                name: deleteExisting
                type: string
              - default: ''
                description: HTTP proxy server for non-SSL requests.
                name: httpProxy
                type: string
              - default: ''
                description: HTTPS proxy server for SSL requests.
                name: httpsProxy
                type: string
              - default: ''
                description: Opt out of proxying HTTP/HTTPS requests.
                name: noProxy
                type: string
              - default: 'true'
                description: Log the commands that are executed during `git-clone`'s operation.
                name: verbose
                type: string
              - default: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:681dc67d2aa1dbecbf65ecd229c8b181dae533bf14b07543c1aeead36aed2198'
                description: The image providing the git-init binary that this Task runs.
                name: gitInitImage
                type: string
              - default: /home/git
                description: |
                  Absolute path to the user's home directory.
                name: userHome
                type: string
            results:
              - description: The precise commit SHA that was fetched by this Task.
                name: commit
                type: string
              - description: The precise URL that was fetched by this Task.
                name: url
                type: string
              - description: The epoch timestamp of the commit that was fetched by this Task.
                name: committer-date
                type: string
            steps:
              - computeResources: {}
                env:
                  - name: HOME
                    value: /home/git
                  - name: PARAM_URL
                    value: 'https://github.com/smarta96/quarkus-app.git'
                  - name: PARAM_REVISION
                  - name: PARAM_REFSPEC
                  - name: PARAM_SUBMODULES
                    value: 'true'
                  - name: PARAM_DEPTH
                    value: '1'
                  - name: PARAM_SSL_VERIFY
                    value: 'true'
                  - name: PARAM_CRT_FILENAME
                    value: ca-bundle.crt
                  - name: PARAM_SUBDIRECTORY
                  - name: PARAM_DELETE_EXISTING
                    value: 'true'
                  - name: PARAM_HTTP_PROXY
                  - name: PARAM_HTTPS_PROXY
                  - name: PARAM_NO_PROXY
                  - name: PARAM_VERBOSE
                    value: 'true'
                  - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  - name: PARAM_USER_HOME
                    value: /home/git
                  - name: WORKSPACE_OUTPUT_PATH
                    value: /workspace/output
                  - name: WORKSPACE_SSH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSH_DIRECTORY_PATH
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                    value: 'false'
                  - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                image: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:681dc67d2aa1dbecbf65ecd229c8b181dae533bf14b07543c1aeead36aed2198'
                name: clone
                script: |
                  #!/usr/bin/env sh
                  set -eu

                  if [ "${PARAM_VERBOSE}" = "true" ] ; then
                    set -x
                  fi

                  if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                    cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                    chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                    chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                  fi

                  if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                    cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                    chmod 700 "${PARAM_USER_HOME}"/.ssh
                    chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                  fi

                  if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                     export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                     if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                        export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                     fi
                  fi
                  CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

                  cleandir() {
                    # Delete any existing contents of the repo directory if it exists.
                    #
                    # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                    # or the root of a mounted volume.
                    if [ -d "${CHECKOUT_DIR}" ] ; then
                      # Delete non-hidden files and directories
                      rm -rf "${CHECKOUT_DIR:?}"/*
                      # Delete files and directories starting with . but excluding ..
                      rm -rf "${CHECKOUT_DIR}"/.[!.]*
                      # Delete files and directories starting with .. plus any other character
                      rm -rf "${CHECKOUT_DIR}"/..?*
                    fi
                  }

                  if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                    cleandir || true
                  fi

                  test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
                  test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
                  test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

                  git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
                  /ko-app/git-init \
                    -url="${PARAM_URL}" \
                    -revision="${PARAM_REVISION}" \
                    -refspec="${PARAM_REFSPEC}" \
                    -path="${CHECKOUT_DIR}" \
                    -sslVerify="${PARAM_SSL_VERIFY}" \
                    -submodules="${PARAM_SUBMODULES}" \
                    -depth="${PARAM_DEPTH}" \
                    -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                  cd "${CHECKOUT_DIR}"
                  RESULT_SHA="$(git rev-parse HEAD)"
                  EXIT_CODE="$?"
                  if [ "${EXIT_CODE}" != 0 ] ; then
                    exit "${EXIT_CODE}"
                  fi
                  RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
                  printf "%s" "${RESULT_COMMITTER_DATE}" > "/tekton/results/committer-date"
                  printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"
                  printf "%s" "${PARAM_URL}" > "/tekton/results/url"
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65532
            workspaces:
              - description: The git repo will be cloned onto the volume backing this Workspace.
                name: output
              - description: |
                  A .ssh directory with private key, known_hosts, config, etc. Copied to
                  the user's home before git commands are executed. Used to authenticate
                  with the git remote when performing the clone. Binding a Secret to this
                  Workspace is strongly recommended over other volume types.
                name: ssh-directory
                optional: true
              - description: |
                  A Workspace containing a .gitconfig and .git-credentials file. These
                  will be copied to the user's home before any git commands are run. Any
                  other files in this Workspace are ignored. It is strongly recommended
                  to use ssh-directory over basic-auth whenever possible and to bind a
                  Secret to this Workspace over other volume types.
                name: basic-auth
                optional: true
              - description: |
                  A workspace containing CA certificates, this will be used by Git to
                  verify the peer with when fetching or pushing over HTTPS.
                name: ssl-ca-directory
                optional: true
          reason: Running
          steps:
            - container: step-clone
              name: clone
              waiting:
                reason: PodInitializing
              imageID: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:539b019e2ff60c023c1b2d0c43f02859ef1e8c3718048be71c07e02af407c46a'
              running:
                startedAt: '2024-08-27T08:40:45Z'
      - name: maven
        params:
          - name: MAVEN_IMAGE
            value: 'registry.redhat.io/ubi8/openjdk-17@sha256:e8cc2e476282b75d89c73057bfa713db22d72bdb2808d62d981a84c33beb2575'
          - name: GOALS
            value:
              - package
          - name: MAVEN_MIRROR_URL
            value: ''
          - name: SERVER_USER
            value: ''
          - name: SERVER_PASSWORD
            value: ''
          - name: PROXY_USER
            value: ''
          - name: PROXY_PASSWORD
            value: ''
          - name: PROXY_PORT
            value: ''
          - name: PROXY_HOST
            value: ''
          - name: PROXY_NON_PROXY_HOSTS
            value: ''
          - name: PROXY_PROTOCOL
            value: http
          - name: CONTEXT_DIR
            value: .
        runAfter:
          - git-clone
        taskRef:
          kind: ClusterTask
          name: maven
        workspaces:
          - name: source
            workspace: shared
          - name: maven-settings
            workspace: shared
        status:
          reason: Pending
      - name: buildah
        params:
          - name: IMAGE
            value: 'quarkus-app:latest'
          - name: BUILDER_IMAGE
            value: 'registry.redhat.io/rhel8/buildah@sha256:aac6629389db17e99894c5bee0da01d4c8065d11d8c6f6e1602f9484290baa70'
          - name: STORAGE_DRIVER
            value: vfs
          - name: DOCKERFILE
            value: ./src/main/docker/Dockerfile.jvm
          - name: CONTEXT
            value: .
          - name: TLSVERIFY
            value: 'true'
          - name: FORMAT
            value: oci
          - name: BUILD_EXTRA_ARGS
            value: ''
          - name: PUSH_EXTRA_ARGS
            value: ''
          - name: SKIP_PUSH
            value: 'false'
        runAfter:
          - maven
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: shared
        status:
          reason: Pending
    workspaces:
      - name: shared
  provenance:
    featureFlags:
      MaxResultSize: 4096
      AwaitSidecarReadiness: true
      Coschedule: workspaces
      ResultExtractionMethod: termination-message
      EnableParamEnum: false
      SendCloudEventsForRuns: false
      EnforceNonfalsifiability: none
      ScopeWhenExpressionsToTask: false
      SetSecurityContext: false
      DisableCredsInit: false
      DisableAffinityAssistant: true
      EnableStepActions: false
      EnableAPIFields: beta
      RequireGitSSHSecretKnownHosts: false
      RunningInEnvWithInjectedSidecars: true
      EnableKeepPodOnCancel: false
      EnableTektonOCIBundles: false
      VerificationNoMatchPolicy: ignore
      EnableProvenanceInStatus: true
      DisableInlineSpec: ''
      EnableArtifacts: false
      EnableCELInWhenExpression: false
  startTime: '2024-08-27T08:40:22Z'
